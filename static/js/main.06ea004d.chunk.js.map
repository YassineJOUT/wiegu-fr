{"version":3,"sources":["utilities/history.ts","utilities/validationSchema.tsx","components/Register/Form/index.tsx","pages/layouts/Layout.tsx","pages/RegistrationPage.tsx","components/Login/Form/index.tsx","pages/LoginPage.tsx","components/Login/Link/Chose.tsx","pages/LoginLink/ChosePage.tsx","components/Login/Link/Message.tsx","pages/LoginLink/MessagePage.tsx","components/Login/Link/Email.tsx","pages/LoginLink/EmailPage.tsx","utilities/protectedRoute.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["history","createBrowserHistory","validEmail","Yup","email","max","required","validPassword","min","validConfirmationCode","test","t","toString","length","positive","validUsername","validTerms","oneOf","loginValidationSchema","shape","password","EmailValidationSchema","registrationSchema","confirmationCode","password1","terms","username","RegisterForm","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","console","log","handleBlur","errors","touched","handleChange","handleSubmit","isSubmitting","Form","Card","centered","style","width","Content","margin","Header","fontSize","padding","Description","className","name","Field","type","placeholder","extra","paddingLeft","paddingRight","Checkbox","label","nChange","onBlur","checked","Button","color","fluid","size","Message","to","Layout","children","Grid","textAlign","height","verticalAlign","Column","maxWidth","as","RegisterPage","LoginForm","onChange","value","LoginPage","LoginChoseForm","marginBottom","LoginChosePage","LoginMessageForm","marginTop","LoginPagePage","LoginEmailForm","LoginEmailPage","ProtectedRoute","render","redirectPath","props","isAuthenticated","authenticationPath","component","pathname","undefined","Route","App","defaultProtectedRouteProps","exact","path","LoginTextPage","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06ea004d.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\n\n\nexport const history = createBrowserHistory();","import * as Yup from \"yup\";\n\nconst validEmail = Yup.string()\n  .email(\"Must be a valid email address\")\n  .max(255, \"Too long for an email\")\n  .required(\"Email is required\");\n\nconst validPassword = Yup.string()\n  .min(8, \"Password must have at least 8 caracters\")\n  .max(255, \"Too long password\")\n  .required(\"Password is required\");\n\nconst validConfirmationCode = Yup.number()\n  .test(\n    \"len\",\n    \"Confirmation code must be a 4 digits number\",\n    (t) => t && t.toString().length === 4\n  )\n  .positive(\"Confirmation code must be positive\")\n  .required(\"Confirmation code is required\");\n\nconst validUsername = Yup.string()\n  .min(3, \"Username must have more than 3 caracters\")\n  .max(50, \"Username must have less than 50 caracters\")\n  .required(\"Username is required\");\n\nconst validTerms = Yup.boolean().oneOf([true], 'Must Accept Terms of Service');\n\nexport const loginValidationSchema = Yup.object().shape({\n  email: validEmail,\n  password: validPassword,\n});\n\nexport const EmailValidationSchema = Yup.object().shape({\n  email: validEmail,\n});\n\nexport const confirmationCodeFormSchema = Yup.object().shape({\n  confirmationCode: validConfirmationCode,\n});\nexport const resetPasswordSchema = Yup.object().shape({\n  password1: validPassword,\n  password: Yup.string().oneOf(\n    [Yup.ref(\"password1\"), null],\n    \"Passwords must match\"\n  ),\n});\n\nexport const registrationSchema = Yup.object().shape({\n  terms: validTerms,\n  username: validUsername,\n  email: validEmail,\n  password: validPassword,\n});\n","import React from \"react\";\nimport { Card, Form, Button, Message, Checkbox } from \"semantic-ui-react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { registrationSchema } from \"../../../utilities/validationSchema\";\nimport { Link } from \"react-router-dom\";\n\n\nconst RegisterForm: React.SFC = () => {\n  const Submit = (\n    values: { email: string; password: string; username: string, terms: boolean },\n    {\n      setSubmitting,\n      resetForm,\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    console.log(values);\n    //console.log()\n    //this.props.login(values.email, values.password);\n    setSubmitting(false);\n    resetForm();\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={{ email: \"\", password: \"\", username: \"\" , terms: false }}\n        validationSchema={registrationSchema}\n        onSubmit={Submit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            <Card centered style={{ width: 450 }}>\n              <Card.Content style={{ margin: 30 }}>\n                <Card.Header style={{ fontSize: 22, padding: 30 }}>\n                  Rejoindre VaTo\n                </Card.Header>\n                {/* <Card.Meta>Joined in 2016</Card.Meta> */}\n                <Card.Description>\n                  {/* <Error touched={touched.email} message={errors.email} /> */}\n                  <div className=\"msg-error\"> <ErrorMessage name=\"email\" /></div>\n                  <Form.Field style={{ padding: 5 }}>\n                    <Field type=\"email\" name=\"email\" placeholder=\"E-mail\"/>\n                   \n                  </Form.Field>\n                  <div className=\"msg-error\"> <ErrorMessage name=\"password\"/></div>\n                  <Form.Field style={{ padding: 5 }}>\n                  <Field type=\"password\" name=\"password\" placeholder=\"Mot de passe\"/>\n                  </Form.Field>\n                  <div className=\"msg-error\"> <ErrorMessage name=\"username\"/></div>\n\n                  <Form.Field style={{ padding: 5 }}>\n                  <Field type=\"text\" name=\"username\" placeholder=\"Nom d'utilisateur\"/>\n                  </Form.Field>\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra style={{ paddingLeft: 40, paddingRight: 40 }}>\n              <div className=\"msg-error\"> <ErrorMessage name=\"terms\"/></div>\n                <Form.Field>\n                   <Checkbox label=\"J'ai lu et j'accepte les conditions générales d'utilisation.\" nChange={handleChange}\n                      onBlur={handleBlur}\n                      name=\"terms\"\n                      checked={values.terms}\n                      /> \n           \n          \n                </Form.Field>\n                <Button color=\"teal\" fluid size=\"large\">\n                  Rejoindre\n                </Button>\n              </Card.Content>\n            </Card>\n          </Form>\n        )}\n      </Formik>\n      <Message>\n        Déjà membre de VaTo ? <Link to=\"/login\">Se connecter</Link>\n        <br />\n        <Link to=\"/\">Mot de passe oublié ?</Link>\n      </Message>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","import React, { ReactNode } from \"react\";\nimport { Grid, Header } from \"semantic-ui-react\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nconst Layout: React.SFC<Props> = ({ children }) => (\n  <div>\n    <Grid textAlign=\"center\" style={{ height: \"100vh\" }} verticalAlign=\"middle\">\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as=\"h2\" color=\"teal\" textAlign=\"center\">\n          {/* <Image src='/logo.png' /> Log-in to your account */}\n        </Header>\n        {children}\n      </Grid.Column>\n    </Grid>\n  </div>\n);\n\nexport default Layout;\n","import React from \"react\";\nimport RegisterForm from '../components/Register/Form'\nimport Layout from \"./layouts/Layout\";\n// Rejoindre VaTo\n// Adresse e-mail\n// Mot de passe\n// Nom d'utilisateur\n// I J'ai lu et j'accepte les conditions générales d'utilisation.\n// Rejoindre\n// Déjà membre de Wattpad ? Se connecter\n// Mot de passe oublié ?\nconst RegisterPage = () => (\n  <Layout>\n    <RegisterForm />\n  </Layout>\n);\n\nexport default RegisterPage;\n","import React from \"react\";\nimport {\n  Card,\n  Form,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport { Formik, ErrorMessage } from \"formik\";\nimport { loginValidationSchema } from \"../../../utilities/validationSchema\";\nimport { Link } from \"react-router-dom\";\n\n\nconst LoginForm: React.SFC = () => {\n  const Submit = (\n    values: { email: string; password: string;},\n    {\n      setSubmitting,\n      resetForm,\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    console.log(values);\n    //this.props.login(values.email, values.password);\n    setSubmitting(false);\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        validationSchema={loginValidationSchema}\n        onSubmit={Submit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            <Card centered style={{ width: 450 }}>\n              <Card.Content style={{ margin: 20 }}>\n                <Card.Header style={{ fontSize: 22, padding: 30 }}>\n                  Connexion à VaTo\n                </Card.Header>\n                {/* <Card.Meta>Joined in 2016</Card.Meta> */}\n                <Card.Description>\n                <div className=\"msg-error\"> <ErrorMessage name=\"email\" /></div>\n                  <Form.Field style={{ padding: 5 }}>\n                    <input\n                      type=\"email\"\n                      placeholder=\"E-mail\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      name=\"email\"\n                      value={values.email}\n                    />\n                  </Form.Field>\n                  <div className=\"msg-error\"> <ErrorMessage name=\"password\" /></div>\n                  <Form.Field style={{ padding: 5 }}>\n                    <input\n                      type=\"password\"\n                      placeholder=\"Mot de passe\"\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      name=\"password\"\n                      value={values.password}\n                    />\n                  </Form.Field>\n                </Card.Description>\n              </Card.Content>\n              <Card.Content extra style={{ paddingLeft: 40, paddingRight: 40 }}>\n                <Button color=\"teal\" fluid size=\"large\">\n                  Connexion\n                </Button>\n              </Card.Content>\n            </Card>\n          </Form>\n        )}\n      </Formik>\n      <Message>\n        Pas de compte ? <Link to=\"/register\">Rejoindre VaTo</Link>\n        <br />\n        <Link to=\"/\">Mot de passe oublié ?</Link>\n      </Message>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// Connexion à VaTo\n// E-mail\n// Mot de passe\n// Connexion\n// Mot de passe oublié ?\nimport React from \"react\";\nimport LoginForm from '../components/Login/Form'\nimport Layout from \"./layouts/Layout\";\n\nconst LoginPage = () => (\n  <Layout>\n    <LoginForm />\n  </Layout>\n);\n\nexport default LoginPage;\n","import React from \"react\";\nimport { Card, Form, Button, Message } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n// Nous vous avons envoyé un lien magique !\n// Nous avons envoyé un e-mail à monadresse@mail.com\n// Il contient un lien magique qui vous connectera à votre compte.\n// Connexion avec mot de passe\n\nconst LoginChoseForm: React.SFC = () => (\n  <div>\n    <Form>\n      <Card centered style={{ width: 450 }}>\n        <Card.Content style={{ margin: 20 }}>\n          <Card.Header style={{ fontSize: 22, padding: 30 }}>\n            Connexion à VaTo\n          </Card.Header>\n          {/* <Card.Meta>Joined in 2016</Card.Meta> */}\n          <Card.Description>\n            <Link to=\"/login-link\">\n              <Button\n                color=\"grey\"\n                fluid\n                size=\"large\"\n                style={{ marginBottom: 20 }}\n              >\n                Obtenir un lien magique\n              </Button>\n            </Link>\n            <Link to=\"/login\">\n              <Button color=\"teal\" fluid size=\"large\">\n                Connexion avec mot de passe\n              </Button>\n            </Link>\n          </Card.Description>\n        </Card.Content>\n      </Card>\n    </Form>\n    <Message>\n      <Link to=\"/login\">Retour></Link>\n    </Message>\n  </div>\n);\n\nexport default LoginChoseForm;\n","import React from \"react\";\nimport LoginChoseForm from '../../components/Login/Link/Chose'\nimport Layout from \"../layouts/Layout\";\n\nconst LoginChosePage = () => (\n  <Layout>\n    <LoginChoseForm />\n  </Layout>\n);\n\nexport default LoginChosePage;\n","import React from \"react\";\nimport { Card, Form, Button, Message } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\n\n// Connexion avec mot de passe\n\nconst LoginMessageForm: React.SFC = () => (\n  <div>\n    <Form>\n      <Card centered style={{ width: 450 }}>\n        <Card.Content style={{ margin: 20 }}>\n          <Card.Header style={{ fontSize: 22, padding: 30 }}>\n            Connexion à VaTo\n          </Card.Header>\n          {/* <Card.Meta>Joined in 2016</Card.Meta> */}\n          <Card.Description style={{ textAlign: \"left\" }}>\n            <p>Nous vous avons envoyé un lien magique ! </p>\n            <p>Nous avons envoyé un e-mail à monadresse@mail.com </p>\n            <p>\n              Il contient un lien magique qui vous connectera à votre compte.{\" \"}\n            </p>\n            <Link to=\"/login\">\n              <Button color=\"teal\" fluid size=\"large\" style={{ marginTop: 30 }}>\n                Connexion avec mot de passe\n              </Button>\n            </Link>\n          </Card.Description>\n        </Card.Content>\n      </Card>\n    </Form>\n    <Message>\n      <Link to=\"/\">Retour</Link>\n    </Message>\n  </div>\n);\n\nexport default LoginMessageForm;\n","import React from \"react\";\nimport LoginMessageForm from '../../components/Login/Link/Message'\nimport Layout from \"../layouts/Layout\";\n\nconst LoginPagePage = () => (\n  <Layout>\n    <LoginMessageForm />\n  </Layout>\n);\n\nexport default LoginPagePage;\n","import React from \"react\";\nimport { Card, Form, Button, Message } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { EmailValidationSchema } from \"../../../utilities/validationSchema\";\n\n// Connexion avec mot de passe\n\nconst LoginEmailForm: React.SFC = () => {\n  const Submit = (\n    values: { email: string; password: string },\n    {\n      setSubmitting,\n      resetForm,\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    console.log(values);\n    //this.props.login(values.email, values.password);\n    setSubmitting(false);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: \"\", password: \"\" }}\n      validationSchema={EmailValidationSchema}\n      onSubmit={Submit}\n    >\n      {({ handleSubmit }) => (\n        <Form onSubmit={handleSubmit}>\n          <Card centered style={{ width: 450 }}>\n            <Card.Content style={{ margin: 20 }}>\n              <Card.Header style={{ fontSize: 22, padding: 30 }}>\n                Connexion à VaTo\n              </Card.Header>\n              {/* <Card.Meta>Joined in 2016</Card.Meta> */}\n              <Card.Description style={{ textAlign: \"left\" }}>\n                <Form.Field style={{ padding: 5 }}>\n                  <div className=\"msg-error\">\n                    {\" \"}\n                    <ErrorMessage name=\"email\" />\n                  </div>\n                  <Field type=\"text\" placeholder=\"Email\" name=\"email\" />\n                </Form.Field>\n                <Link to=\"login-link-text\">\n                  <Button\n                    color=\"teal\"\n                    fluid\n                    size=\"large\"\n                    style={{ marginTop: 30 }}\n                  >\n                    Suivant\n                  </Button>\n                </Link>\n              </Card.Description>\n            </Card.Content>\n          </Card>\n        </Form>\n      )}\n      <Message>\n        <Link to=\"/login\">Retour></Link>\n      </Message>\n    </Formik>\n  );\n};\n\nexport default LoginEmailForm;\n","import React from \"react\";\nimport LoginEmailForm from '../../components/Login/Link/Email'\nimport Layout from \"../layouts/Layout\";\n\nconst LoginEmailPage = () => (\n  <Layout>\n    <LoginEmailForm />\n  </Layout>\n);\n\nexport default LoginEmailPage;\n","import * as React from 'react';\nimport {Redirect, Route, RouteProps} from 'react-router';\n\nexport interface ProtectedRouteProps extends RouteProps {\n    isAuthenticated: boolean;\n    authenticationPath: string;\n}\n\n class ProtectedRoute extends Route<ProtectedRouteProps> {\n     \n     render = () => {\n        let redirectPath: string = '';\n        if (!this.props.isAuthenticated) {\n            redirectPath = this.props.authenticationPath;\n        }\n\n        if (redirectPath) {\n            return <Route {...this.props} component={() => (<Redirect to={{pathname: redirectPath}}/>)}  render={undefined}/>;\n        } else {\n            return <Route {...this.props}/>;\n        }\n    }\n}\n\nexport default ProtectedRoute;","import React from 'react';\nimport { Router } from \"react-router-dom\";\nimport { history } from \"./utilities/history\";\nimport RegisterPage from \"./pages/RegistrationPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport LoginChosePage from \"./pages/LoginLink/ChosePage\";\nimport LoginTextPage from \"./pages/LoginLink/MessagePage\";\nimport LoginEmailForm from \"./pages/LoginLink/EmailPage\";\nimport ProtectedRoute, {\n  ProtectedRouteProps,\n} from \"./utilities/protectedRoute\";\nfunction App() {\n  const defaultProtectedRouteProps: ProtectedRouteProps = {\n    isAuthenticated: true,\n    authenticationPath: \"/\",\n  };\n  return (\n    <div>\n      <Router history={history}>\n      {/* <Route\n              path=\"/\"\n              exact\n              component={() => (\n                <Redirect\n                  to={\"login\"}\n                />\n              )}\n            /> */}\n      <ProtectedRoute\n              {...defaultProtectedRouteProps}\n              exact={true}\n              path=\"/login-link\"\n              component={LoginEmailForm}\n            />\n      <ProtectedRoute\n              {...defaultProtectedRouteProps}\n              exact={true}\n              path=\"/register\"\n              component={RegisterPage}\n            />\n      <ProtectedRoute\n              {...defaultProtectedRouteProps}\n              exact={true}\n              path=\"/login\"\n              component={LoginPage}\n            />\n      <ProtectedRoute\n              {...defaultProtectedRouteProps}\n              exact={true}\n              path=\"/login-link-text\"\n              component={LoginTextPage}\n            />\n      <ProtectedRoute\n              {...defaultProtectedRouteProps}\n              exact={true}\n              path=\"/\"\n              component={LoginChosePage}\n            />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}